@using Syncfusion.Blazor.Buttons

@if (Tag != null && TagExtended != null && TagExtended.Count() > 0)
{
    <EditForm Model="Tag">
        <DataAnnotationsValidator/>
        <div class="formbuilder-language-picker form-group-small">
            <label class="form-label custom-color-primary">@TextProvider.Get("BACKEND_FORM_DEFINITION_LANGUAGE_PICKER")</label>
            <div class="extra-small-element-separator"></div>
            <TelerikButtonGroup SelectionMode="@ButtonGroupSelectionMode.Single">
                <ButtonGroupToggleButton @bind-Selected="@German">@TextProvider.Get("LANGUAGE_GERMAN")</ButtonGroupToggleButton>
                <ButtonGroupToggleButton @bind-Selected="@Italian">@TextProvider.Get("LANGUAGE_ITALIAN")</ButtonGroupToggleButton>
            </TelerikButtonGroup>
        </div>
        <div class="small-element-separator"></div>
        <div class="form-group">
            <label class="form-label custom-color-primary">@TextProvider.Get("TASK_DESCRIPTION_FIELD")</label>
            @if (CurrentLanguage != null)
            {
                <label class="font-detail">@TagExtended.FirstOrDefault(p => p.LANG_Language_ID != CurrentLanguage).Description</label>
                <div class="extra-small-element-separator"></div>
                <InputText @bind-Value="TagExtended.FirstOrDefault(p => p.LANG_Language_ID == CurrentLanguage).Description" class="form-control"></InputText>
            }
        </div>
        <div class="small-element-separator"></div>
        <div class="form-group">
            <label class="form-label custom-color-primary">@TextProvider.Get("TASK_COLOR_FIELD")</label>
            <div class="extra-small-element-separator"></div>
            <TelerikColorPicker @bind-Value="@Tag.Color" FillMode="@ThemeConstants.ColorPicker.FillMode.Outline" Size="@ThemeConstants.ColorPicker.Size.Medium" ValueFormat="@ColorFormat.Hex">
                <ColorPickerViews>
                    <ColorPickerGradientView ShowOpacityEditor="false"></ColorPickerGradientView>
                </ColorPickerViews>
            </TelerikColorPicker>
        </div>
        <div class="small-element-separator"></div>
        <div class="segment-button-toolbar">
            <TelerikButton ButtonType="ButtonType.Button" ThemeColor="Secondary" Icon="SvgIcon.X" Class="k-standalone-button"
                           OnClick="@ReturnToPreviousPage">
                @TextProvider.Get("BUTTON_CANCEL")
            </TelerikButton>
            <TelerikButton ButtonType="ButtonType.Button" ThemeColor="Primary" Icon="SvgIcon.ArrowRight" Class="k-standalone-button"
                           OnClick="@SaveForm">
                @TextProvider.Get("BUTTON_SAVE")
            </TelerikButton>
        </div>
    </EditForm>
    @if (ContextList != null && ContextList.Count > 1 && !IsEdit)
    {
        <div class="small-element-separator"></div>
        <div class="context-selection-container">
            <p>@TextProvider.Get("ADD_TASK_SETTING_TO_FOLLWING_CONTEXTS")</p>
            <div class="checkboxes">
                @foreach (var ctx in ContextList.OrderBy(e => e.SortOrder))
                {
                    <label>

                        @if (ctx.ID == Tag.TASK_Context_ID)
                        {
                            <TelerikCheckBox Class="ctx-checkbox" Value="true" Enabled="false">

                            </TelerikCheckBox>
                        }
                        else
                        {
                            <TelerikCheckBox Class="ctx-checkbox" ValueChanged="@((bool value) => ContextCheckBoxValueChanged(ctx, value))"
                                             Enabled="ctx.ID != Tag.TASK_Context_ID">

                            </TelerikCheckBox>
                        }

                        @(" " + ctx.Text)
                    </label>
                }
            </div>
        </div>
    }
}