@page "/Backend/Form/Manteinance/{ID}"

@layout MainLayout

<TelerikWizard @bind-Value="@CurrentTab" ShowPager="false">
    <WizardSteps>
        <WizardStep Label="@TextProvider.Get("BACKEND_FORM_MANTEINANCE_STEP_CHOOSE_FORM")" Icon="@("fas fa-stream")" Disabled="true">
            <Content>
                <div class="backend-step-container backend-first-step-container">
                    <div class="backend-form-selection">
                        <div class="form-group">
                            <div class="font-normal custom-color-primary">
                                @TextProvider.Get("BACKEND_FORM_APPLICATION_AUTHORITY_SELECTION")
                            </div>
                            <div class="element-dropdown">
                                <TelerikDropDownList Data="@AuthorityList" TextField="Description" ValueField="ID"
                                                     @bind-Value="@AuthorityID" OnChange="AuthorityChanged"></TelerikDropDownList>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="font-normal custom-color-primary">
                                @TextProvider.Get("BACKEND_FORM_MANTEINANCE_DEFINITION_SELECTION")
                            </div>
                            <div class="element-dropdown">
                                <TelerikDropDownList Data="@DefinitionList.Where(p => p.AUTH_Authority_ID == AuthorityID).ToList()" TextField="FORM_Name" ValueField="ID"
                                                     @bind-Value="@DefinitionID" OnChange="DefinitionChanged"></TelerikDropDownList>
                            </div>
                        </div>
                    </div>
                </div>
            </Content>
        </WizardStep>
        <WizardStep Label="@TextProvider.Get("BACKEND_FORM_MANTEINANCE_STEP_INPUT_FORM")" Icon="@("fa-light fa-file-lines")" Disabled="true">
            <Content>
                <div class="backend-step-container form-application-container">
                      <div class="form-application-container">
                        @if (Definition != null && Data != null)
                        {
                            @if (!string.IsNullOrEmpty(Definition.FORM_Description))
                            {
                                <h5 class="h5 custom-color-primary">@(TextProvider.Get("FORM_DETAIL_DESCRIPTION"))</h5>
                                <div class="extra-small-element-separator"></div>
                                var markupDescription = new MarkupString(Definition.FORM_Description);

                                <div class="font-normal">
                                    @markupDescription
                                </div>
                                <div class="small-element-separator"></div>
                            }
                            @if (DataProperties != null)
                            {
                                @foreach (var p in DataProperties.OrderBy(p => p.SortOrder))
                                {
                                    if (!string.IsNullOrEmpty(p.Description))
                                    {
                                        var markupDescription = new MarkupString(p.Description);
                                        <h5 class="h5 custom-color-primary">@p.Title</h5>
                                        <div class="extra-small-element-separator"></div>
                                        <div class="font-normal">
                                            @markupDescription
                                        </div>

                                        <div class="small-element-separator"></div>
                                    }
                                }
                            }
                            @if (DataRessources != null && DataRessources.Count() > 0)
                            {
                                <h5 class="h5 custom-color-primary">@TextProvider.Get("FORM_DETAIL_RESSOURCES")</h5>
                                <div class="extra-small-element-separator"></div>
                                @foreach (var r in DataRessources.OrderBy(p => p.SortOrder))
                                {
                                    if (r.FILE_FileInfo_ID != null)
                                    {
                                        var fileSize = FileProvider.GetFileSize(r.FILE_FileInfo_ID.Value);

                                        <div class="form-detail-download" @onclick="@(() => DownloadRessource(r.FILE_FileInfo_ID.Value, r.Description))">
                                            <div class="form-detail-download-icon">
                                                <TelerikIcon Icon="@("fas fa-file-download")"></TelerikIcon>
                                            </div>
                                            <div class="form-detail-download-description font-normal">
                                                @r.Description (@(fileSize/1024) kb)
                                            </div>
                                        </div>
                                    }
                                }

                                <div class="small-element-separator"></div>
                            }
                            <h5 class="h5 custom-color-primary">@TextProvider.Get("FORM_MANTAINANCE_DATA")</h5>
                            <div class="extra-small-element-separator"></div>
                            <div class="mantainance-input-container">
                                <EditForm Model="@Data" Context="EditFormContext">
                                    <div class="form-group flex-full">
                                        <label for="@Data.Mantainance_Title" class="form-label">@TextProvider.Get("FORM_MANTAINANCE_TITLE")</label>
                                        @{
                                            string ErrorTitleCSS = "form-control";

                                            @if (!string.IsNullOrEmpty(Data.Mantainance_Title_ErrorCode))
                                            {
                                                ErrorTitleCSS = "form-control mantainance-container-error-style";
                                            }
                                        }
                                        <div class="extra-small-element-separator"></div>
                                        <InputText @bind-Value="Data.Mantainance_Title" class="@ErrorTitleCSS"></InputText>
                                        @if (Data.Mantainance_Title_ErrorCode != null)
                                        {
                                            <div class="mantainance-container-error font-normal">
                                                @if (Data.Mantainance_Title_ErrorCode != null)
                                                {
                                                    @TextProvider.Get(Data.Mantainance_Title_ErrorCode).Replace("{0}", TextProvider.Get("FORM_MANTAINANCE_TITLE"))
                                                }
                                            </div>
                                        }
                                    </div>
                                    <div class="extra-small-element-separator"></div>
                                    @if (Definition != null && Definition.HasPriorities == true && PriorityList != null && PriorityList.Count() > 0)
                                    {
                                        <label for="@Data.Mantainance_Title" class="form-label">@TextProvider.Get("FORM_MANTAINANCE_PRIORITY")</label>
                                        <div class="extra-small-element-separator"></div>
                                        <div class="mantainance-priority">
                                            @foreach (var auth in PriorityList.OrderBy(p => p.SortOrder))
                                            {
                                                string buttonCSS = "btn-secondary";

                                                if (Data.FORM_Application_Priority_ID != null && Data.FORM_Application_Priority_ID == auth.ID)
                                                {
                                                    buttonCSS = "btn-primary";
                                                }

                                                <div class="btn @buttonCSS authority-tag" @onclick="@(() => SetPriority(auth.ID))" @onclick:stopPropagation="true">
                                                    <span>
                                                        <TelerikIcon Icon="@auth.Icon"></TelerikIcon>
                                                        @auth.Name
                                                    </span>
                                                </div>
                                            }
                                        </div>
                                    }
                                    <div class="extra-small-element-separator"></div>
                                    <div class="form-group flex-full">
                                        <label for="@Data.Mantainance_Title" class="form-label">@TextProvider.Get("FORM_MANTAINANCE_DESCRIPTION")</label>
                                        <div class="extra-small-element-separator"></div>
                                        <div class="change-status-input">
                                            <TelerikEditor @bind-Value="Data.Mantainance_Description"
                                                       Tools="@Tools"
                                                       EditMode="@EditorEditMode.Div"
                                                       Class="font-normal"
                                                       Height="300px">
                                                <EditorSettings>
                                                    <EditorPasteSettings ConvertMsLists="true"
                                                                     RemoveMsClasses="true"
                                                                     RemoveMsStyles="true"
                                                                     RemoveHtmlComments="true"
                                                                     RemoveAllAttributes="true"
                                                                     StripTags="@StripTags"
                                                                     RemoveAttributes="@RemoveAttributes">
                                                    </EditorPasteSettings>
                                                </EditorSettings>
                                            </TelerikEditor>
                                        </div>
                                    </div>
                                    <div class="extra-small-element-separator"></div>
                                    <div class="form-group form-group-flex flex-full">
                                        <div class="form-group-flex-item">
                                            <label for="@Data.Mantainance_Title" class="form-label">@TextProvider.Get("FORM_MANTAINANCE_INPUT_ONLY_MUNICIPAL")</label>
                                            <div class="extra-small-element-separator"></div>
                                            <div class="municipal-input">
                                                <TelerikSwitch @bind-Value="@Data.IsMunicipal" OnLabel="@TextProvider.Get("YES")" OffLabel="@TextProvider.Get("NO")" Width="65px" Class="list-item-switch"></TelerikSwitch>
                                            </div>
                                        </div>
                                        @if (HasCommitteeRights && Data.IsMunicipal)
                                        {
                                            <div class="form-group-flex-item">
                                                <label for="@Data.Mantainance_Title" class="form-label">@TextProvider.Get("FORM_MANTAINANCE_INPUT_MUNICIPAL_COMMITTEE")</label>
                                                <div class="extra-small-element-separator"></div>
                                                <div class="municipal-input">
                                                    <TelerikSwitch @bind-Value="@Data.IsMunicipalCommittee" OnLabel="@TextProvider.Get("YES")" OffLabel="@TextProvider.Get("NO")" Width="65px" Class="list-item-switch"></TelerikSwitch>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                    <div class="extra-small-element-separator"></div>
                                    <div class="form-group">
                                        <label for="@Data.Mantainance_Title" class="form-label">@TextProvider.Get("FORM_MANTAINANCE_INPUT_MUNICIPAL_DEADLINE")</label>
                                        <div class="extra-small-element-separator"></div>
                                        <div class="municipal-input">
                                            <TelerikDatePicker Format="dd.MM.yyyy" @bind-Value="Data.MunicipalDeadline" class="form-control"></TelerikDatePicker>
                                        </div>
                                    </div>
                                    <div class="extra-small-element-separator"></div>
                                    <div class="form-group">
                                        <label class="form-label">@TextProvider.Get("APPLICATION_RESPONSIBLE")</label>
                                        <div class="extra-small-element-separator"></div>
                                        <div class="application-row responsible-relative">
                                            @if (Data.TASK_Task_ID != null && TaskResponsibleList != null)
                                            {
                                                <div class="responsible-container" @onclick="@(() => ShowResponsibleSelection())" @onclick:stopPropagation="true">
                                                    @if(TaskResponsibleList.Count() > 0)
                                                    {
                                                        @foreach(var resp in TaskResponsibleList.OrderBy(p => p.SortDesc))
                                                        {
                                                            var user = AuthProvider.GetUserSync(resp.AUTH_Users_ID.Value);

                                                            <div class="responsible-item" @onclick="@(() => ResponsibleQuickRemove(resp))" @onclick:stopPropagation="true">
                                                                <UserCard SmallStyle="false" User="@user"></UserCard>
                                                            </div>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <div class="responsible-placeholder">
                                                            @TextProvider.Get("APPLICATION_RESPONSIBLE_PLACEHOLDER")
                                                        </div>
                                                    }
                                                </div>
                                                @if (ResponsibleSelectionVisibile)
                                                {
                                                    <div class="responsible-quickadd-container">
                                                        <ICWebApp.Components.Tasks.Responsible.Control TaskID="@Data.TASK_Task_ID.Value" ResponsibleList="@TaskResponsibleList" ShowInputField="false"
                                                                                                       OverlayClicked="ResponsibleOverlayClicked" ItemAdded="@(() => ResponsibleStateChanged())" 
                                                                                                       ItemRemoved="@(() => ResponsibleStateChanged())">
                                                        </ICWebApp.Components.Tasks.Responsible.Control>
                                                    </div>
                                                }
                                            }
                                        </div>                 
                                    </div>                 
                                    <div class="small-element-separator"></div>
                                    <h5 class="h5 custom-color-primary">@TextProvider.Get("FORM_MANTAINANCE_MAP")</h5>
                                    <div class="extra-small-element-separator"></div>
                                    @if (Municipality != null && Data != null)
                                    {
                                        double lat = Municipality.LatLan[0];
                                        double lan = Municipality.LatLan[1];

                                        if(Data.Mantainance_LanLat != null)
                                        {
                                            if (Data.Mantainance_LanLat[0] != null && Data.Mantainance_LanLat[1] != null)
                                            {
                                                lat = Data.Mantainance_LanLat[0].Value;
                                                lan = Data.Mantainance_LanLat[1].Value;
                                            }
                                        }

                                        <div class="map-container">
                                            <TelerikMap MinZoom="15" MaxZoom="19" Zoom="15" OnClick="MapClicked" Height="100%"
                                                Center="@(new double[]{lat,lan})">
                                                <MapLayers>
                                                    <MapLayer Type="@MapLayersType.Tile"
                                                              Attribution="@Attribution"
                                                              Subdomains="@Subdomains"
                                                              UrlTemplate="@UrlTemplate">
                                                    </MapLayer>
                                                    @if (Data.Mantainance_LanLat != null && Data.Mantainance_LanLat_Title != null)
                                                    {
                                                        <MapLayer Type="@MapLayersType.Marker"
                                                                  Data="@(new List<FORM_Application>() { Data })"
                                                                  LocationField="@nameof(FORM_Application.Mantainance_LanLat)"
                                                                  TitleField="@nameof(FORM_Application.Mantainance_LanLat_Title)">
                                                        </MapLayer>
                                                    }
                                                </MapLayers>
                                            </TelerikMap>
                                        </div>
                                    }
                                </EditForm>
                            </div>

                            @if (UploadElements != null && UploadFilesDefinitions != null && UploadFilesDefinitions.Count() > 0)
                            {
                                <div class="small-element-separator"></div>
                                <h5 class="h5 custom-color-primary">@TextProvider.Get("FORM_MANTAINANCE_UPLOADS")</h5>
                                <div class="extra-small-element-separator"></div>
                                <div class="form-application-document-upload-container">
                                    @foreach (var ele in UploadElements)
                                    {
                                        var def = UploadFilesDefinitions.FirstOrDefault(p => p.ID == ele.FORM_Definition_Upload_ID);

                                        if (def != null)
                                        {
                                            string ErrorCSS = "";

                                            @if (!string.IsNullOrEmpty(ele.ERROR_CODE))
                                            {
                                                ErrorCSS = "application-upload-container-error-style";
                                            }

                                            <div class="form-application-document-element">
                                                <div class="application-upload-container @ErrorCSS">
                                                    <div class="font-normal">
                                                        @def.Description
                                                    </div>
                                                    <div class="font-extra-small">
                                                        @def.AlloweTypesParsed
                                                    </div>
                                                    <div class="extra-small-element-separator"></div>
                                                    <UploadComponent FileInfoList="ele.CACH_UploadFiles" Multiple="@def.Multiupload" OnRemove="OnRemove" ID="@(ele.ID.ToString())"></UploadComponent>
                                                </div>
                                                <div class="application-upload-container-error font-normal">
                                                    @if (!string.IsNullOrEmpty(def.Description) && ele.ERROR_CODE != null)
                                                    {
                                                        @TextProvider.Get(ele.ERROR_CODE).Replace("{0}", def.Description)
                                                    }
                                                </div>
                                            </div>
                                        }
                                    }
                                </div>
                                <div class="small-element-separator"></div>
                            }
                            @if (!IsValid)
                            {
                                <div class="element-separator"></div>
                                <div class="container-error">
                                    @TextProvider.Get("FORM_MANTAINANCE_ERROR")
                                </div>
                            }
                        }
                    </div>
                </div>
            </Content>
        </WizardStep>        
    </WizardSteps>
    <WizardButtons>
        @{
            if (CurrentTab == 0)
            {
                <TelerikButton ButtonType="ButtonType.Button" Class="btn btn-secondary" ThemeColor="@(ThemeConstants.Button.ThemeColor.Secondary)" OnClick="@(() => OnCancel())">@TextProvider.Get("WIZARD_CANCEL")</TelerikButton>

                if (SelectedUserID != null && DefinitionID != null)
                {
                    <TelerikButton ButtonType="ButtonType.Button" Class="btn btn-primary" ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)" OnClick="@(() => OnFirstStepChanged())">@TextProvider.Get("WIZARD_NEXT")</TelerikButton>
                }
                else
                {
                    <TelerikButton ButtonType="ButtonType.Button" Class="btn btn-secondary" Enabled="false" ThemeColor="@(ThemeConstants.Button.ThemeColor.Secondary)">@TextProvider.Get("WIZARD_NEXT")</TelerikButton>
                }
            }
            else if (CurrentTab == 1)
            {
                @if (ID == "New")
                {
                    <TelerikButton ButtonType="ButtonType.Button" Class="btn btn-secondary" ThemeColor="@(ThemeConstants.Button.ThemeColor.Secondary)" OnClick="@(() => ReturnToFirstStep())">@TextProvider.Get("WIZARD_PREVIOUS")</TelerikButton>
                }
                
                <TelerikButton ButtonType="ButtonType.Button" Class="btn btn-primary" ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)" OnClick="@(() => Commit())">@TextProvider.Get("FORM_BACKEND_MANTAINANCE_COMMIT_BUTTON")</TelerikButton>
            }
        }
    </WizardButtons>
</TelerikWizard>