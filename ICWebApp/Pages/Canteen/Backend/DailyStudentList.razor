@page "/Admin/Students/DailyStudentlist"
@page "/Admin/Students/DailyStudentlist/Canteen/{CanteenID}"
@page "/Admin/Students/DailyStudentlist/School/{SchoolID}"

@using ICWebApp.Components.Canteen
@layout MainLayout


<div class="small-element-separator"></div>
<div class="dashboard-card dashboard-card-large">
    <div class="h5 card-title custom-color-primary">
        @TextProvider.Get("CANTEEN_STUDENTS_DASHBOARD_DAILY_ALL")
    </div>
    <div class="extra-small-element-separator"></div>
    <div class="card-data">
        <div class="numbers-container">
            <div class="number-item number-total">
                <div class="value-container">
                    @(MovementsList.Count() + AdditionalMeals)
                </div>
                <div class="number-text font-small">
                    @TextProvider.Get("CANTEEN_STUDENTS_TOTAL")
                </div>
            </div>
            <div class="number-item number-default">
                <div class="value-container">
                    @AdditionalMeals
                </div>
                <div class="number-text font-small">
                    @TextProvider.Get("CANTEEN_STUDENTS_ADDITIONAL_PERSONAL")
                </div>
            </div>
            @if (MenuTypes != null && MenuTypes.Count() > 0)
            {
                @foreach (var menu in MenuTypes.OrderBy(p => p.SortOrder))
                {
                    if (menu != null)
                    {
                        <div class="number-item number-default">
                            <div class="value-container">
                                @MovementsList.Where(p => p.CanteenMenuID == menu.ID).Count()
                            </div>
                            <div class="number-text font-small">
                                @TextProvider.Get(menu.TEXT_SystemTexts_Code)
                            </div>
                        </div>
                    }
                }
            }
        </div>
    </div>
        <div class="element-separator"></div>
        <div class="dashboard-card-toolbar">            
            <div class="day-picker">
                <div class="day-decrease">
                    <div class="btn btn-secondary" @onclick="@(() => DecreaseDate())">
                        <i class="fa-regular fa-chevron-left"></i>
                    </div>
                </div>
                <div class="date-field">
                    <TelerikDatePicker Format="dd.MM.yyyy" @bind-Value="CurrentDate" View="Telerik.Blazor.CalendarView.Month" class="form-control"></TelerikDatePicker>
                </div>
                <div class="day-increase">
                    <div class="btn btn-secondary" @onclick="@(() => IncreaseDate())">
                        <i class="fa-regular fa-chevron-right"></i>
                    </div>
                </div>
            </div>
            <div class="btn btn-secondary" @onclick="@(() => ExportToExcel())">
                <i class="fa-solid fa-file-excel"></i>
                @TextProvider.Get("BUTTON_EXPORT")
            </div>
            @if (CurrentDate.Year == DateTime.Now.Year && CurrentDate.Month == DateTime.Now.Month && CurrentDate.Day == DateTime.Now.Day)
            {
                <div class="btn btn-secondary" @onclick="ShowSendStudentList">
                    <i class="fa-regular fa-paper-plane-top"></i>
                    @TextProvider.Get("CANTEEN_SEND_STUDENTLIST")
                </div>
            }
            else{
                <div class="btn btn-secondary btn-disabled">
                    <i class="fa-regular fa-paper-plane-top"></i>
                    @TextProvider.Get("CANTEEN_SEND_STUDENTLIST")
                </div>
            }
        </div>
</div>
<div class="element-separator"></div>
<TelerikWindow @bind-Visible="@ShowSendStudent" Width="600px" Modal="true">
    <WindowTitle>
        @TextProvider.Get("CANTEEN_SEND_STUDENTLIST")
    </WindowTitle>
    <WindowContent>
        <div class="send-list-container">
            <EditForm Model="@Data" OnValidSubmit="SendStudentList">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="extra-small-element-separator"></div>
                <div class="form-group">
                    <label class="form-label font-normal">@TextProvider.Get("MAINMENU_BACKEND_CANTEEN_STUDENTLIST_EMAIL")</label>
                    <InputText @bind-Value="Data.Email" type="text" class="form-control" autocomplete="none"></InputText>
                    <CustomValidationMessage For="@(() => Data.Email)" TextCode="MAINMENU_BACKEND_CANTEEN_STUDENTLIST_EMAIL" />
                </div>
                <div class="small-element-separator"></div>
                <div class="send-list-button-container">
                    <button class="btn btn-secondary" type="button" @onclick="HideSendStudentList">@(TextProvider.Get("BUTTON_CANCEL"))</button>
                    <button class="btn btn-primary" type="submit">@(TextProvider.Get("BUTTON_SEND"))</button>
                </div>
            </EditForm>
        </div>
    </WindowContent>
    <WindowActions>
        <WindowAction Name="Close" OnClick="HideSendStudentList" />
    </WindowActions>
</TelerikWindow>
<div class="canteen-list-container">
    <CustomLoader Visible="@(IsDataBusy)"
                  Text="@null" Class="initial-data-loader">
    </CustomLoader>
    <TelerikGrid Data="@MovementsList.OrderBy(p => p.CanteenName).ThenBy(p => p.SchoolName).ThenBy(p => p.SchoolClass).ThenBy(p => p.FullName).ToList()" Pageable="true" Sortable="true" Resizable="false" PageSize="500" Navigable="true"
                 ScrollMode="@GridScrollMode.Scrollable" Groupable="false" Reorderable="true">
        <GridToolBarTemplate>
            <GridSearchBox DebounceDelay="200"></GridSearchBox>
            <div class="filter-group-container">
                @if (Canteens != null && Canteens.Count() > 1)
                {
                    <div class="canteen-filter-container">
                            <div class="filter-element filter-authorities">
                                @if (SelectedCanteen != null && SelectedCanteen.Count() > 0)
                                {
                                    <div class="btn btn-secondary authority-tag" @onclick="@(() => ClearCanteenFilter())" @onclick:stopPropagation="true">
                                        <span>
                                            <TelerikIcon Icon="@("fa-duotone fa-filter-slash")"></TelerikIcon>
                                            @TextProvider.Get("AUTHORITY_TAG_FILTER_ALL")
                                        </span>
                                    </div>
                                }
                                else
                                {
                                    <div class="btn btn-primary authority-tag" @onclick:stopPropagation="true">
                                        <span>
                                            <TelerikIcon Icon="@("fa-duotone fa-filter-slash")"></TelerikIcon>
                                            @TextProvider.Get("AUTHORITY_TAG_FILTER_ALL")
                                        </span>
                                    </div>
                                }

                                @foreach (var item in Canteens.OrderBy(p => p.Name))
                                {
                                    string buttonCSS = "btn-secondary";

                                    if (SelectedCanteen != null && SelectedCanteen.Contains(item.ID))
                                    {
                                        buttonCSS = "btn-primary";
                                    }

                                    <div class="btn @buttonCSS authority-tag" @onclick="@(() => AddCanteenFilter(item.ID))" @onclick:stopPropagation="true">
                                        <span>
                                            @item.Name
                                        </span>
                                    </div>
                                }
                            </div>
                    </div>
                }
                @if (Schools != null && Schools.Count() > 1)
                {
                    <div class="school-filter-container">
                        <div class="filter-element filter-authorities">
                            @if (SelectedSchools != null && SelectedSchools.Count() > 0)
                            {
                                <div class="btn btn-secondary authority-tag" @onclick="@(() => ClearSchoolFilter())" @onclick:stopPropagation="true">
                                    <span>
                                        <TelerikIcon Icon="@("fa-duotone fa-filter-slash")"></TelerikIcon>
                                        @TextProvider.Get("AUTHORITY_TAG_FILTER_ALL")
                                    </span>
                                </div>
                            }
                            else
                            {
                                <div class="btn btn-primary authority-tag" @onclick:stopPropagation="true">
                                    <span>
                                        <TelerikIcon Icon="@("fa-duotone fa-filter-slash")"></TelerikIcon>
                                        @TextProvider.Get("AUTHORITY_TAG_FILTER_ALL")
                                    </span>
                                </div>
                            }

                            @foreach (var item in Schools.OrderBy(p => p.Name))
                            {
                                string buttonCSS = "btn-secondary";

                                if (SelectedSchools != null && SelectedSchools.Contains(item.ID))
                                {
                                    buttonCSS = "btn-primary";
                                }

                                <div class="btn @buttonCSS authority-tag" @onclick="@(() => AddSchoolFilter(item.ID))" @onclick:stopPropagation="true">
                                    <span>
                                        @item.Name
                                    </span>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </GridToolBarTemplate>
        <GridColumns>
            <GridColumn Field="@nameof(V_CANTEEN_Daily_Movements.CanteenName)" Title="@TextProvider.Get("CANTEEN_STUDENT_CANTEEN")"></GridColumn>
            <GridColumn Field="@nameof(V_CANTEEN_Daily_Movements.SchoolName)" Title="@TextProvider.Get("CANTEEN_STUDENT_SCHOOL")"></GridColumn>
            <GridColumn Field="@nameof(V_CANTEEN_Daily_Movements.SchoolClass)" Title="@TextProvider.Get("CANTEEN_STUDENT_SCHOOL_CLASS")"></GridColumn>
            <GridColumn Field="@nameof(V_CANTEEN_Daily_Movements.FullName)" Title="@TextProvider.Get("CANTEEN_DASHBOARD_NAME")"></GridColumn>
            <GridColumn Field="@nameof(V_CANTEEN_Daily_Movements.TaxNumber)" Title="@TextProvider.GetOrCreate("CANTEEN_TAXNUMBER")"></GridColumn>
            <GridColumn Field="@nameof(V_CANTEEN_Daily_Movements.CanteenMenuID)" Title="@TextProvider.GetOrCreate("CANTEEN_MEALMENU")">
                <Template>
                    @{
                        var item = context as V_CANTEEN_Daily_Movements;
                        if (item.MenuTextCode != null)
                        {
                            <span>
                                @TextProvider.Get(item.MenuTextCode)
                            </span>
                        }

                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(V_CANTEEN_Daily_Movements.IsLactoseIntolerance)" Title="@TextProvider.GetOrCreate("CANTEEN_CREATE_SUBSCRIPTION_PATHOLOGIES")">
                <Template>
                    @{
                        var item = context as V_CANTEEN_Daily_Movements;
                        string result = "";
                        if (item.IsLactoseIntolerance)
                        {
                            result = result + TextProvider.GetOrCreate("CANTEEN_CREATE_SUBSCRIPTION_LACTOSE") + ",";
                        }
                        if (item.IsGlutenIntolerance)
                        {
                            result = result + TextProvider.GetOrCreate("CANTEEN_CREATE_SUBSCRIPTION_GLUTEN") + ",";
                        }
                        if (item.AdditionalIntolerance != null)
                        {
                            result = result + item.AdditionalIntolerance;
                        }
                        result = result.TrimEnd(',');

                        <span>@result </span>

                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </TelerikGrid>
</div>
<div class="element-separator"></div>
<div class="segment-button-toolbar">
    <div class="btn btn-secondary" @onclick="@ReturnToPreviousPage">@TextProvider.Get("BUTTON_RETURN")</div>
</div>