@page "/ForcePasswordReset/{resetToken}"
@using ICWebApp.Application.Interface.Provider
@using ICWebApp.Application.Interface.Services
@using ICWebApp.Components.Authorization;

@if (tokenValid)
{
    <div class="container">
        <div class="row py-5">
            <div class="col-12">
                <ChangePasswordComponent User="user" IsForceReset="@true"></ChangePasswordComponent>
            </div>
        </div>
    </div>
}
else
{
  
}

@code {
    [Parameter] public string resetToken { get; set; }
    [Inject] ITEXTProvider TextProvider { get; set; }
    [Inject] IAUTHProvider AuthProvider { get; set; }
    [Inject] IBusyIndicatorService BusyIndicatorService { get; set; }
    [Inject] ISessionWrapper SessionWrapper { get; set; }
    [Inject] IBreadCrumbService BreadCrumbService { get; set; }

    private AUTH_Users? user;
    private bool tokenValid = false;

    protected override async Task OnInitializedAsync()
    {
        BreadCrumbService.ClearBreadCrumb();
        BreadCrumbService.ShowBreadCrumb = false;
        
        Guid resetTokenGuid = Guid.Empty;
        Guid.TryParse(resetToken, out resetTokenGuid);
        if (resetTokenGuid != Guid.Empty)
        {
            user = await AuthProvider.GetUserByForcePasswordResetToken(resetTokenGuid);
            if (user != null && user.ForcePasswordReset)
            {
                if (user.ForcePwResetTokenExpirationData > DateTime.Now)
                {
                    tokenValid = true;
                    SessionWrapper.PageTitle = TextProvider.Get("FORCE_PASSWORD_RESET_MESSAGE");
                }
                else
                {
                    SessionWrapper.PageTitle = TextProvider.Get("FORCE_PASSWORD_RESET_TOKEN_EXPIRED");
                }
            }
            else
            {
                SessionWrapper.PageTitle = TextProvider.Get("FORCE_PASSWORD_RESET_INVALID");
            }
        }
        else
        {
            SessionWrapper.PageTitle = TextProvider.Get("FORCE_PASSWORD_RESET_INVALID");
        }
        BusyIndicatorService.IsBusy = false;
    }
}